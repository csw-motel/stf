var EventEmitter, Parser, MemStat, split,
  extend = function(child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key)) child[key] = parent[key];
    }

    function ctor() {
      this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
  },
  hasProp = {}.hasOwnProperty;

EventEmitter = require('events').EventEmitter;

split = require('split');

Parser = require('../parser');

MemStat = (function(superClass) {
  var RE_COLSEP, RE_CPULINE;

  extend(MemStat, superClass);

  RE_CPULINE = /^cpu[0-9]+ .*$/mg;

  RE_COLSEP = /\ +/g;

  function MemStat(sync) {
    this.sync = sync;
    this.interval = 1000;
    this.stats = this._emptyStats();
    this._ignore = {};
    this._timer = setInterval((function(_this) {
      return function() {
        return _this.update();
      };
    })(this), this.interval);
    this.update();
  }

  MemStat.prototype.end = function() {
    clearInterval(this._timer);
    this.sync.end();
    return this.sync = null;
  };

  MemStat.prototype.update = function() {
    return new Parser(this.sync.pull('/proc/meminfo')).readAll().then((
      function(_this) {
        return function(out) {
          return _this._parse(out);
        };
      })(this))["catch"]((function(_this) {
      return function(err) {
        _this._error(err);
      };
    })(this));
  };

  MemStat.prototype._parse = function(out) {
    var cols, i, len, line, match, stats, total, type, val;
    stats = this._emptyStats();
    var data = out.toString();
    data.split(/\n/g).forEach(function(line) {
      line = line.split(':');
      if (line.length < 2) {
        return;
      }
      stats[line[0]] = parseInt(line[1].trim(), 10);
      return stats;
    });
    return this._set(stats);
  };

  MemStat.prototype._set = function(stats) {
    var cur, found, id, loads, m, old, ref, ticks;
    loads = stats;
    found = true;
    if (found) {
      this.emit('load', loads);
    }
    return this.stats = stats;
  };

  MemStat.prototype._error = function(err) {
    return this.emit('error', err);
  };

  MemStat.prototype._emptyStats = function() {
    return {};
  };

  return MemStat;

})(EventEmitter);

module.exports = MemStat;
